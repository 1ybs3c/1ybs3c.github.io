<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/11/hello-world/"/>
      <url>/2022/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Paper-10.10.11.143</title>
      <link href="/2022/03/16/HTB-Paper-10.10.11.143/"/>
      <url>/2022/03/16/HTB-Paper-10.10.11.143/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">Nmap scan report for 10.10.11.143Host is up (0.19s latency).Not shown: 997 closed tcp ports (conn-refused)PORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.0 (protocol 2.0)| ssh-hostkey:|   2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)|   256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)|_  256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)80/tcp  open  http     Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9| http-methods:|   Supported Methods: GET POST OPTIONS HEAD TRACE|_  Potentially risky methods: TRACE|_http-title: HTTP Server Test Page powered by CentOS443/tcp open  ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9| tls-alpn:|_  http/1.1| http-methods:|   Supported Methods: GET POST OPTIONS HEAD TRACE|_  Potentially risky methods: TRACE|_http-title: HTTP Server Test Page powered by CentOS|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US| Subject Alternative Name: DNS:localhost.localdomain| Issuer: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2021-07-03T08:52:34| Not valid after:  2022-07-08T10:32:34| MD5:   579a 92bd 803c ac47 d49c 5add e44e 4f84|_SHA-1: 61a2 301f 9e5c 2603 a643 00b5 e5da 5fd5 c175 f3a9|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问80，是个测试页面<br><img src="/images/pasted-0.png"><br>尝试扫描目录无果<br><img src="/images/pasted-1.png"><br>通过Burp抓包发现X-Backend-Server: office.paper<br><img src="/images/pasted-2.png"><br>添加host后再次访问，这次像样了，并且知道网站用的wordpress，后端语言是PHP<br><img src="/images/pasted-3.png"><br>插个题外话：访问https遇到这种情况不要慌，直接凭空输入thisisunsafe即可<br><img src="/images/pasted-4.png"><br>使用WPscan扫描无果<br><img src="/images/pasted-5.png"><br>搜索Wordpress 5.2.3的漏洞发现存在未授权访问<br><img src="/images/pasted-6.png"><br>查看第一篇文章也发现了该线索<br><img src="/images/pasted-7.png"><br>访问漏洞URL发现新的子域名<br><img src="/images/pasted-8.png"><br>添加进hosts文件后再次访问<br><img src="/images/pasted-9.png"><br>注册账号进来后发现有个Bot<br><img src="/images/pasted-10.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>按照提示问他文件列表，但是触发了报错，爆出了路径，随即尝试文件包含，果然<br><img src="/images/pasted-11.png"><br>并且发现可以进行目录遍历<br><img src="/images/pasted-12.png"><br>通过浏览文件发现了用户密码</p><pre class="line-numbers language-none"><code class="language-none">export ROCKETCHAT_USER=recyclops  export ROCKETCHAT_PASSWORD=Queenofblad3s!23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/pasted-13.png"><br>并且可以之间执行命令<br><img src="/images/pasted-14.png"><br>尝试反弹shell<br><img src="/images/pasted-15.png"><br><img src="/images/pasted-16.png"></p><h2 id="get-user-flag"><a href="#get-user-flag" class="headerlink" title="get user flag"></a>get user flag</h2><p><img src="/images/pasted-17.png"><br><img src="/images/pasted-19.png"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>直接用账号密码进行ssh连接<br><img src="/images/pasted-20.png"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>上豌豆荚扫一波，发现存在[[sudo漏洞]]<br><img src="/images/pasted-21.png"><br>试了几个脚本，最后还是这个靠谱<br><a href="https://github.com/Almorabea/Polkit-exploit">https://github.com/Almorabea/Polkit-exploit</a><br><img src="/images/pasted-22.png"><br><img src="/images/pasted-23.png"></p><h2 id="get-root-flag"><a href="#get-root-flag" class="headerlink" title="get root flag"></a>get root flag</h2><p><img src="/images/pasted-24.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Forest-10.10.10.161</title>
      <link href="/2020/02/14/HTB-Forest-10%2010%2010%20161/"/>
      <url>/2020/02/14/HTB-Forest-10%2010%2010%20161/</url>
      
        <content type="html"><![CDATA[<h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p><img src="/images/HTB-Forest" alt="HTB-Forest"><br>发现开着445，永恒之蓝肯定没戏，但还是要试一下，万一呢😂，果然。。。<br><img src="/images/HTB-Forest-1" alt="HTB-Forest"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>用enum4linux -a 10.10.10.161收集用户信息，发现一些用户名且允许空密码，还有工作组，先放着。<br><img src="/images/HTB-Forest-2" alt="HTB-Forest"><br><img src="/images/HTB-Forest-3" alt="HTB-Forest"><br>也可以使用RPC来获取用户名<br>rpcclient -U ‘ ‘ 10.10.10.161<br>密码空<br>rpcclient $&gt;enumdomusers<br>列出rpc用户<br>虽然可以匿名访问，但是没有可用的工作组<br><img src="/images/HTB-Forest-4" alt="HTB-Forest"><br>enum4linux -P 10.10.10.161查看密码策略，得知最小密码长度为7<br><img src="/images/HTB-Forest-5" alt="HTB-Forest"><br>看来445行不通了，换思路<br>88端口运行着kerberos服务，这就触及到知识盲区了，去钻研了一番。。。<br>分享两位大佬的文章：<br><a href="https://www.tarlogic.com/en/blog/how-to-attack-kerberos/">https://www.tarlogic.com/en/blog/how-to-attack-kerberos/</a></p><p><a href="https://docs.typo3.org/typo3cms/extensions/ig_ldap_sso_auth/stable/SSO/Kerberos.html#understanding-kerberos-concepts">https://docs.typo3.org/typo3cms/extensions/ig_ldap_sso_auth/stable/SSO/Kerberos.html#understanding-kerberos-concepts</a></p><blockquote><p>Kerberos版本5是Windows 2000所有版本的标准，并确保对网络资源的最高安全性。Kerberos协议名称基于希腊神话中称为Kerberos的三头狗。Kerberos的三个负责人包括密钥分发中心（<a href="https://docs.typo3.org/typo3cms/extensions/ig_ldap_sso_auth/stable/Glossary/Index.html#term-kdc">KDC</a>），客户端用户和具有所需访问服务的服务器。KDC作为域控制器的一部分安装，并执行两个服务功能：<br>1、身份验证服务（AS）<br>2、票务授予服务（TGS）。<br>首先，由于Kerberos是一种身份验证协议，因此可以对它执行暴力攻击。此外，强行使用Kerberos与强行使用其他身份验证方法相比具有许多优势，如下所示：</p></blockquote><ul><li>无需域帐户即可进行攻击，只需连接到KDC。</li><li>Kerberos预身份验证错误不会通过正常的登录失败事件（4625）记录在Active Directory中，而是使用Kerberos预身份验证失败的特定日志记录（4771）。</li><li>即使密码错误，Kerberos也会指示用户名是否正确。在执行这种技术而又不知道任何用户名的情况下，这是一个巨大的优势。</li><li>在Kerberos暴力破解中，还可以发现不需要预先身份验证的用户帐户，这对于执行ASREPRoast攻击很有用。</li></ul><p>但是，通过实施暴力攻击，也可以<strong>阻止用户帐户</strong>。因此，应谨慎使用此技术。</p><blockquote><p>AS交换<br>最初登录网络时，用户必须通过提供登录名和密码来协商访问权限，以便由KDC的AS部分进行验证。KDC有权访问Active Directory用户帐户信息。成功通过身份验证后，将向用户授予“获取票证”（TGT），该票证对本地域（在我们的示例中，对于领域example.com）有效。TGT的默认生存期为10个小时，可以在用户的​​整个登录会话期间进行更新，而无需用户重新输入密码。<br>如果KDC批准了客户的TGT请求，则答复（称为AS答复）将包括两个部分：使用仅KDC（TGS）可以解密的密钥加密的TGT和使用用户密码加密的会话密钥哈希以处理与KDC的将来通信。由于客户端系统无法读取TGT内容，因此必须盲目将票证提供给TGS以获得服务票证。TGT包括生存时间参数，授权数据，与客户端通信时使用的会话密钥和客户端名称。<br>TGS交换<br>为用户呈现所述TGT到的TGS部分KDC希望访问服务器服务时。KDC上的TGS对用户的TGT进行身份验证，并为客户端和远程服务器创建票证和会话密钥。然后，该信息称为服务票证，然后在客户端计算机上本地缓存。<br>TGS接收客户端的TGT并使用其自己的密钥读取它。如果TGS批准了客户端的请求，则会为客户端和目标服务器生成服务票证。客户端使用从AS答复中较早获取的TGS会话密钥读取其部分。客户端在接下来要进行的客户端/服务器交换中将TGS答复的服务器部分呈现给目标服务器。<br>客户/服务器交换<br>一旦客户端用户获得了客户端/服务器服务票证，他就可以与服务器服务建立会话。服务器可以使用自己的KDC长期密钥来解密来自TGS的间接信息。然后，该服务票证用于验证客户端用户并在服务器和客户端之间建立服务会话。超过票证的生命周期后，必须续订服务票证才能使用该服务。</p></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>下载可以获得TGT的工具<br><img src="/images/HTB-Forest-6" alt="HTB-Forest"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> pippip insatall -r requirements.txtpython setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/HTB-Forest-7" alt="HTB-Forest"><br>通过查看impacket的官方文档发现GetNPUsers.py可以获取不需要预身份验证的用户并获取TGT<br><img src="/images/HTB-Forest-8" alt="HTB-Forest"><br>使用方法：<br><img src="/images/HTB-Forest-9" alt="HTB-Forest"><br>但是执行完报错。。。此处卡了很久<br><img src="/images/HTB-Forest-10" alt="HTB-Forest"><br>直到我回过头来看nmap扫描结果看看能不能发现新线索时，发现域名不是forest.htb，而是htb.local。。。坑啊<br><img src="/images/HTB-Forest-11" alt="HTB-Forest"><br>再次尝试，bingo！不需要预身份验证的用户是svc-alfresco<br>如果提示时间不对，可以执行：rdate -n forest.htb来同步靶机时间 或者 ntp <server-ip><br><img src="/images/HTB-Forest-12" alt="HTB-Forest"><br>接下来使用hashcat破解密码，通过查阅hashcat官方对照表，发现需要使用18200模式破解<br>或者在终端输入./hashcat –example-hashes | grep -i krb #查找具体的类型<br>./hashcat –example-hashes | less #按下/输入krb5asrep$23查找具体的mode<br><img src="/images/HTB-Forest-13" alt="HTB-Forest"><br>根据之前的经历，由于kali没有装显卡驱动，就在win上跑吧<br>输入： hashcat64.exe -m 18200 -a 0 –force C:\Users\LYB\Desktop\hashes.asreproast D:#Hacking#penetration-渗透资料\密码字典（rockyou.txt）\rockyou.txt<br><img src="/images/HTB-Forest-14" alt="HTB-Forest"><br>得到密码：s3rvice<br><img src="/images/HTB-Forest-15" alt="HTB-Forest"><br>用这个密码尝试登录smb，不行。。<br><img src="/images/HTB-Forest-16" alt="HTB-Forest"><br>用smbmap试试：<br><img src="/images/HTB-Forest-17" alt="HTB-Forest"><br>枚举可被只读的用户文件<br><img src="/images/HTB-Forest-18" alt="HTB-Forest"><br>没有什么有价值的信息<br>尝试直接获取admin票据<br><img src="/images/HTB-Forest-19" alt="HTB-Forest"><br>然而并不成功。。<br><img src="/images/HTB-Forest-20" alt="HTB-Forest"><br>此处又卡住了，知道账户密码却不知道从哪登录😭<br>上全端口扫一遍<br><img src="/images/HTB-Forest-21" alt="HTB-Forest"><br>这两个端口比较可疑：5985、47001<br>网上搜索了一番发现5985端口上运行着winrm（windows远程管理），感觉有戏<br>在github上找到了针对winrm的工具<br>#git clone <a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a><br>直接运行会报错：<br><img src="/images/HTB-Forest-22" alt="HTB-Forest"><br>发现报错了，查看官方文档发现缺少依赖<br><img src="/images/HTB-Forest-23" alt="HTB-Forest"><br>执行#gem install winrm winrm-fs stringio<br><img src="/images/HTB-Forest-24" alt="HTB-Forest"><br>再次执行：<br><img src="/images/HTB-Forest-25" alt="HTB-Forest"><br>这。。网上搜了一些报错原因：<br>“该用户未加入到远程管理组”<br>需在服务端输入：</server-ip></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">winrm set winrm/config/client/auth @{Basic="true"}winrm set winrm/config/service/auth @{Basic="true"}winrm set winrm/config/service @{AllowUnencrypted="true"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是我现在连shell都没有拿啥设置。。。<br><img src="/images/HTB-Forest-26" alt="HTB-Forest"><br>网上遨游了一番后得知，需要使用getTGT.py脚本生成一个ccache缓存，让服务器信任我，才能通过winrm访问<br>1、越过哈希/通过密钥（PTK）<br>该攻击旨在使用用户NTLM哈希来请求Kerberos票证，以替代常见的“通过NTLM哈希”协议。因此，这在禁用NTLM协议且仅允许Kerberos作为身份验证协议的网络中特别有用。<br>为了执行此攻击，需要目标用户帐户的NTLM哈希（或密码）。因此，一旦获得用户哈希，就可以为该帐户请求TGT。最后，可以访问用户帐户具有权限的任何服务或计算机。<br>2、由于请求的TGT&nbsp;被写入ccache文件中，因此它也可以与带有参数-k的其他impacket&nbsp;示例一起使用，甚至可以与其他工具一起使用（如smbexec.py或wmiexec.py），这是Kerberos票证的一种广泛使用的格式。在Linux中。<br><img src="/images/HTB-Forest-27" alt="HTB-Forest"><br>再次执行之前的evil-winrm脚本，成功！<br><img src="/images/HTB-Forest-28" alt="HTB-Forest"><br>后来发现之前一直连着到新加坡的vpn，断掉35的vpn就可以直接访问。。。<br>不容易，这完全不像一个定级到简单的机器</p><h2 id="get-user-flag"><a href="#get-user-flag" class="headerlink" title="get user flag"></a>get user flag</h2><p><img src="/images/HTB-Forest-29" alt="HTB-Forest"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>接下来开始提权到Admin<br>由于特殊时期，vpn网络有些波动，导致拿到的shell交互很慢，尝试利用python简单http服务传输mimikatz、nc等工具，但效果不理想，刚传上去就断了，或者运行程序直接卡死。。所以就先放一放去看绿盟课程了，明天继续<br>在拿到普通用户权限之后首先想到的是运行GetUserSPNs.py：（此脚本将尝试查找和获取与普通用户帐户关联的服务主体名称。输出与JtR和HashCat兼容）。事实告诉我没这么简单<br><img src="/images/HTB-Forest-30" alt="HTB-Forest"><br>接着尝试mimikatz读内存里登录用户的密码<br>将用到的工具上传至靶机<br><img src="/images/HTB-Forest-31" alt="HTB-Forest"><br>由于这个这个shell不稳定，所以用nc反弹一个试试<br><img src="/images/HTB-Forest-32" alt="HTB-Forest"><br>一样的卡，还是用evil吧。。<br><img src="/images/HTB-Forest-33" alt="HTB-Forest"><br>由于网络问题，直接执行mimikatz会直接卡死，无法交互，所以输入：<br><img src="/images/HTB-Forest-34" alt="HTB-Forest"><br>mimikatz.exe “”privilege::debug”” “”log sekurlsa::logonpasswords full”” exit &gt;&gt; shash.txt<br>读取shash内容，并没有读到hash，应该是权限不够<br><img src="/images/HTB-Forest-35" alt="HTB-Forest"><br>尝试下载SAM数据库也无果，内容为空，或者是因为没权限下载</p><h2 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h2><p>又没思路了，在网上搜了一番域渗透提权的文章后，我把目标锁定在了<a href="https://github.com/BloodHoundAD/BloodHound">BloodHound</a></p><blockquote><p>简介和背景</p></blockquote><blockquote><p>2014年，Emmanuel Gras和Lucas Bouillot在“ 信息通信技术研讨会”（Symposium on Information and Communications）上发表了题为“&nbsp;Chemins decontrôleen environement Active Directory&nbsp;”（“Active Directory 控制路径”）的安全技术演讲，在演讲中他们使用图论和Active Directory对象权限来回答“谁能成为域管理员”的问题？我强烈建议你查看他们的演示文稿和白皮书，我们从这些资料中为BloodHound项目获得了最初的一些灵感以及我们添加到BloodHound攻击图的对象控制路径的非常有用的和具体的信息。</p></blockquote><blockquote><p>Rohan Vazarkar（@CptJesus），Will Schroeder（@harmj0y）和我很自豪地宣布BloodHound 1.3的发布，它引入了基于Active Directory对象控制的几种新的边缘类型。此外，Will和Lee（@tifkin_）在开发相应的PowerShell cmdlet方面做了大量的工作，使得pentester或red teamer能够利用这些新的边缘类型。我们认为基于ACL的攻击路径将开辟Active Directory域中的攻击格局的“新大陆”。</p></blockquote><p>信息搜集脚本：SharpHound.exe、SharpHound.ps1使用说明：<br><img src="/images/HTB-Forest-36" alt="HTB-Forest"><br>上传ps1、exe扫描脚本并执行（ -c all 指的是执行除GPOLocalGroup和LoggedOn之外的所有收集方法）<br><img src="/images/HTB-Forest-37" alt="HTB-Forest"><br>也可以在本地执行<br>./SharpHound.ps1 -c all -d htb.local –domaincontroller 10.10.10.161<br>下载BloodHound在本地分析，以图形化展示更多信息<br><img src="/images/HTB-Forest-38" alt="HTB-Forest"><br>安装完BloodHound之后运行，报错。查看官方文档得知需要neo4j环境<br><img src="/images/HTB-Forest-39" alt="HTB-Forest"><br>今天有点晚了，明天继续搞</p><hr><p>在kali上安装neo4j<br><img src="/images/HTB-Forest-40" alt="HTB-Forest"><br>配置neo4j，输入neo4j console<br><img src="/images/HTB-Forest-41" alt="HTB-Forest"><br>在浏览器打开<a href="http://localhost:7474页面更改密码">http://localhost:7474页面更改密码</a><br>使用默认凭据登录（如下），然后将要求您更改密码：<br>用户名：neo4j<br>密码：neo4j<br>new password :kali<br><img src="/images/HTB-Forest-42" alt="HTB-Forest"><br>改过密码后用得到连接路径<br><img src="/images/HTB-Forest-43" alt="HTB-Forest"><br>输入neo4j strat启动neo4j<br><img src="/images/HTB-Forest-44" alt="HTB-Forest"><br>在终端输入bloodhound启动<br><img src="/images/HTB-Forest-45" alt="HTB-Forest"><br>输入账户密码后登录，将扫描的结果导入<br><img src="/images/HTB-Forest-46" alt="HTB-Forest"><br><img src="/images/HTB-Forest-47" alt="HTB-Forest"><br>但是。。导入进去没数据，又再网上找了一阵子原因<br><img src="/images/HTB-Forest-48" alt="HTB-Forest"><br>最后得知要将github项目中Bloodhound的示例数据库替换掉neo4j原来的数据库。。。<br><img src="/images/HTB-Forest-49" alt="HTB-Forest"><br>再次导入，成功！<br><img src="/images/HTB-Forest-50" alt="HTB-Forest"><br>将示例自带的数据删除，添加刚才扫描的结果<br><img src="/images/HTB-Forest-51" alt="HTB-Forest"><br>点击查找到admin的最短路径，得到该域控网络拓朴图<br><img src="/images/HTB-Forest-52" alt="HTB-Forest"><br>右键write Dacl点击help，查看提权利用办法<br><img src="/images/HTB-Forest-53" alt="HTB-Forest"><br><img src="/images/HTB-Forest-54" alt="HTB-Forest"><br>我看到中间有一个exchange的群组，就搜了一下有关它的越权漏洞，和权限滥用<br><a href="https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/">https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/</a></p><blockquote><p>默认情况下，Exchange Windows Permissions安全组对安装Exchange的域的域对象具有writeDACL权限。</p></blockquote><blockquote><p>writeDACL权限允许身份修改对指定对象的权限（换句话说：修改ACL），这意味着通过成为组织管理组的成员，我们可以将特权提升为域管理员的特权。&nbsp;为了利用这一点，我们将先前获得的用户帐户添加到该Exchange Trusted Subsystem组中。我们再次登录（因为安全组成员资格仅在登录时加载），现在我们是该Exchange Trusted Subsystem组和该Exchange Windows Permission组的成员，这使我们能够修改域的ACL。</p></blockquote><blockquote><p>如果您有权修改AD对象的ACL，则可以将权限分配给允许其写入特定属性（例如包含电话号码的属性）的身份。除了为这些类型的属性分配读/写权限外，还可以为扩展权限分配权限。这些权限是预定义的任务，例如更改密码，向邮箱发送电子邮件的权限以及更多。通过应用以下扩展权限，也可以将任何给定帐户添加为域的复制伙伴：</p></blockquote><ul><li><em>复制目录更改</em></li><li><em>全部复制目录更改</em></li></ul><blockquote><p>当我们为用户帐户设置这些权限时，我们能够请求域中任何用户的密码哈希，包括域的krbtgt帐户的密码哈希。可在以下GitHub页面上找到有关此特权升级技术的更多信息：https : //github.com/gdedrouas/Exchange-AD-Privesc</p></blockquote><p>同时我在搜索引擎中遨游时发现了使用aclpwn工具可以找到最短攻击路径：（要配合Bloodhound）<br><a href="https://github.com/fox-it/aclpwn.py/wiki/Quickstart">https://github.com/fox-it/aclpwn.py/wiki/Quickstart</a><br><img src="/images/HTB-Forest-55" alt="HTB-Forest"><br>将svc-alfresco添加到Exchange Trusted Subsystem组<br><img src="/images/HTB-Forest-56" alt="HTB-Forest"><br>但是我发现添加完之后，还没来得及操作，就从exchange里退出来了，可能因为这是一台公共靶机，用户配置在几十秒后会被重置，所以我新建了一个账户llyb<br><img src="/images/HTB-Forest-57" alt="HTB-Forest"><br>或者用以下命令：<br><img src="/images/HTB-Forest-58" alt="HTB-Forest"><br>直接切换用户不行，秒退<br><img src="/images/HTB-Forest-59" alt="HTB-Forest"><br>添加完用户之后的拓朴图：<br><img src="/images/HTB-Forest-60" alt="HTB-Forest"><br>给lyb用户赋予管理权限：<br><img src="/images/HTB-Forest-61" alt="HTB-Forest"><br>使用impacket项目中的secretsdump.py获得Administrator的hash<br><img src="/images/HTB-Forest-62" alt="HTB-Forest"></p><blockquote><p>该脚本原理：执行各种技术以从远程计算机中转储秘密，而无需在该计算机上执行任何代理。对于SAM和LSA机密（包括缓存的凭据），我们尝试从注册表中读取尽可能多的内容，然后将配置单元保存在目标系统（％SYSTEMROOT％\ Temp目录）中，并从那里读取其余数据。对于DIT文件，我们使用DL_DRSGetNCChanges（）方法转储NTLM哈希，纯文本凭据（如果可用）和Kerberos密钥。它还可以通过使用smbexec / wmiexec方法执行的vssadmin转储NTDS.dit。如果脚本不可用，该脚本将启动其工作所需的服务（例如，即使已禁用，也应使用“远程注册表”）。工作完成后，一切恢复到原始状态。</p></blockquote><p>拿到hash之后想使用hashcat破解出来明文，再进行登录，但是网上还有hashcat都没有<br><img src="/images/HTB-Forest-63" alt="HTB-Forest"><br>最后还是利用impacket项目中的wmiexec.py可以直接利用NTLM_hash来登录admin，成功！！！（用psexec.py也可以）<br><img src="/images/HTB-Forest-64" alt="HTB-Forest"></p><blockquote><p>原理：整个过程是先调用WMI通过账号密码或者NTLM认证（WCE注入）连接到远程计算机，然后如果提供了账号密码，则用这个账号密码建立一个到目标的IPC连接。随后WMI会建立一个共享文件夹，用于远程读取命令执行结果。</p></blockquote><blockquote><p>当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之前创建的共享文件夹中。最后，通过FSO组件访问远程共享文件夹中的结果文件，将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文件共享。</p></blockquote><blockquote><p>由于WMI只负责创建进程，没有办法可以判断命令是否执行完毕，所以脚本采用的方法是延迟1200ms后读取结果文件，但是如果命令执行的时间大于1200ms，比如systeminfo 或者ping之类的，这时候读取结果文件会导致读取的结果不完整，然后在删除结果文件时会出错。</p></blockquote><h2 id="get-root-flag"><a href="#get-root-flag" class="headerlink" title="get root flag"></a>get root flag</h2><p><img src="/images/HTB-Forest-65" alt="HTB-Forest"></p><p>第一次做windows的靶机本以为很简单，没想到是台域控服务器，一切都是从零开始，感谢这台靶机的作者，让我学到了很多关于smb枚举和利用、kerberos认证、域控、windows访问控制列表、exchange权限滥用、windows提权等相关知识。了解了enum4linux、smbmap、BloodHound、neo4j、impacket、evil-winrm、mimikatz、aclpwn等工具并学习了其工作原理。今后会多做一些windows的机器来弥补不足<br><img src="/images/HTB-Forest-66" alt="HTB-Forest"><br>已使用 OneNote 创建。</p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> windows </tag>
            
            <tag> kerberos </tag>
            
            <tag> winrm </tag>
            
            <tag> impacket </tag>
            
            <tag> smbmap </tag>
            
            <tag> enum4linux </tag>
            
            <tag> hashcat </tag>
            
            <tag> Bloodhound </tag>
            
            <tag> neo4j </tag>
            
            <tag> aclpwn.py </tag>
            
            <tag> LDAP </tag>
            
            <tag> 域渗透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
